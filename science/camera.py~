import bpy


class Camera(object):
    # initialize the camera with an empty for pointing
    def __init__(self,cam_name = None, clip_end = None, clip_begin = None, horizon_color=[0.0, 0.0, 0.0]):
        # (I) set initial camera location, and an empty object to track
        #     the camera with, using Blender's internal tracker
        camera_x = 5. 
        camera_y = 0.0
        camera_z = 0.0
        if cam_name is None:
            cam_name = "Camera"
        if clip_end is None: # clip rendering, usually for galaxy stuff want big
            clip_end = 100.0
        if clip_begin is None:
            clip_begin = 0.01
        bpy.data.cameras[cam_name].clip_end = clip_end
        bpy.data.cameras[cam_name].clip_start = clip_begin
        camobj = bpy.data.objects[cam_name] # get cam as an object to track
        camobj.location = [camera_x, camera_y, camera_z]
        camobj.rotation_mode = 'QUATERNION' # supposedly, mo betta then 'XYZ'
        camobj.rotation_euler = [90.0*(pi/180.0), 0.0, -90.0*(pi/180.0)]
        # (II) now, set up camera tracking on an empty
        # add empty for tracking
        bpy.ops.object.empty_add(type='SPHERE')
        # set location to 0,0,0 for starts
        esph = bpy.data.objects['Empty']
        # change name for cam empty incase we want to parent other things
        esph.name = 'EmptyCam'
        esph.location = [0, 0, 0]
        esph.select = False
        # add an autotrack to this empty
        camobj.select=False
        # select objects in correct series to have camera track object
        camobj.select = True
        esph.select = True
        bpy.ops.object.track_set(type='TRACKTO')
        bpy.data.worlds['World'].horizon_color = horizon_color # horizon = black, default


    # put camera somewhere
    def set_camera(c_location, c_pointing, cam_name = None):
        if cam_name is None:
            cam_name = 'Camera'
        esph = bpy.data.objects['EmptyCam']
        # change to cam coords to find angles
        bpy.data.objects[cam_name].location = c_location
        # move empty tracking object to pointing
        esph.location = c_pointing


    # where is the camera pointing?
    def get_cam_pointing():
        pting = bpy.data.objects['EmptyCam'].location
        print("camera pointing : ")
        print(pting)
        return pting


    def zoom_camera(zoom_factor=1.0, render_steps=10, cam_name='Camera', scene_name='Scene'):
        cam = get_object_location(cam_name)
        x0 = cam[0]
        y0 = cam[1]
        z0 = cam[2]
        a = get_cam_pointing()[0] - x0
        b = get_cam_pointing()[1] - y0
        c = get_cam_pointing()[2] - z0

        x = x0 - a*(zoom_factor-1.0)
        y = y0 - b*(zoom_factor-1.0)
        z = z0 - c*(zoom_factor-1.0)

        dx = (x - x0)/(render_steps-1.)
        dy = (y - y0)/(render_steps-1.)
        dz = (z - z0)/(render_steps-1.)

        # rotate where cam is looking
        for i in range(0,render_steps):
            set_camera([x0+dx*i, y0+dy*i, z0+dz*i], get_cam_pointing(), cam_name = cam_name) 
            render(scene_name = scene_name)



    # move the camera based on a bunch of bezier curves
    # locs and pts of form [[x,y,z],[x,y,z],[x,y,z]...]
    def set_camera_bezier(locs, pts, nfin, cam_name='Camera', visualize=False, scene_name=None):
        nf = floor(float(nfin)/(len(locs)-1.))
        camloc = []
        campts = []
        # first, delete if we have previously visualized
        for obj in bpy.data.objects:
            if ((obj.name.find('bezier') != -1)):
                delete_obj_mesh(obj.name)
        for i in range(0,len(locs)-1):
            # locations
            l1 = mathutils.Vector(locs[i])
            l2 = mathutils.Vector(locs[i+1])
            # pointings
            p1 = mathutils.Vector(pts[i])
            p2 = mathutils.Vector(pts[i+1])
            # pointing vectors for bezier tangents
            h1 = mathutils.Vector([l1[0]-p1[0],l1[1]-p1[1],l1[2]-p1[2]])
            h2 = mathutils.Vector([l2[0]-p2[0],l2[1]-p2[1],l2[2]-p2[2]])
            # create curve for cam loc
            curloc = mathutils.geometry.interpolate_bezier(l1,h1,h2,l2,nf)
            # and one for pointing
            curpts = mathutils.geometry.interpolate_bezier(p1,h1,h2,p2,nf)
            # add pts to curves for cam loc and cam pointing
            for j in range(0,nf):
                if not visualize: # render
                    set_camera(curloc[j].to_tuple(10),curpts[j].to_tuple(10),cam_name=cam_name)
                    render(scene_name=scene_name)
                else: # otherwise, draw points on path
                    camloc.append(curloc[j].to_tuple(10))
                    campts.append(curpts[j].to_tuple(10))

        #plot pts if you want to visualize stuff
        if visualize: 
            print('locs = ')
            print(camloc)
            print('pts = ')
            print(campts)
            global bviz ## CHANGE!!!
            deselect_all()
            num = "%04d" % (bviz)
            # first, for location curves
            me = bpy.data.meshes.new('bezierCurveLoc'+num)
            ob = bpy.data.objects.new('bezierCurveLoc'+num,me)
            ob.location = (0,0,0)
            bpy.context.scene.objects.link(ob)    # Link object to scene
            coords = [(0,0,0)]
            me.from_pydata(coords,[],[])
            color = (1,0,0) # location pts will be red
            halo_size = 0.1
            mat = makeMaterial('bezierCurveLoc'+num, color, (1,1,1), 1.0, 1.0, 
                               mat_type='HALO', halo_size=halo_size)
            setMaterial(ob,mat) # sets everything to material 0 by default
            ob = bpy.data.objects['bezierCurveLoc'+num] # select right object
            ob.select = True
            bpy.context.scene.objects.active=ob
            bpy.ops.object.mode_set(mode='OBJECT')  # toggle to edit mode                    
            bpy.ops.object.mode_set(mode='EDIT')  # toggle to edit mode
            bm = bmesh.from_edit_mesh(ob.data)
            bm.verts[0].co = camloc[0]
            for i in range(1,len(camloc)):
                bm.verts.new(camloc[i])
                print(camloc[i])
            bmesh.update_edit_mesh(ob.data)
            bpy.ops.object.mode_set(mode='OBJECT')  # toggle to edit mode
            # now, for pointings
            deselect_all()
            me = bpy.data.meshes.new('bezierCurvePts'+num)
            ob = bpy.data.objects.new('bezierCurvePts'+num,me)
            ob.location = (0,0,0)
            bpy.context.scene.objects.link(ob)    # Link object to scene
            coords = [(0,0,0)]
            me.from_pydata(coords,[],[])
            color = (0,0,1) # location pts will be blue
            halo_size = 0.1
            mat = makeMaterial('bezierCurvePts'+num, color, (1,1,1), 1.0, 1.0, 
                               mat_type='HALO', halo_size=halo_size)
            setMaterial(ob,mat) # sets everything to material 0 by default
            ob = bpy.data.objects['bezierCurvePts'+num] # select right object
            ob.select = True
            bpy.context.scene.objects.active=ob
            bpy.ops.object.mode_set(mode='OBJECT')  # toggle to edit mode                    
            bpy.ops.object.mode_set(mode='EDIT')  # toggle to edit mode
            bm = bmesh.from_edit_mesh(ob.data)
            bm.verts[0].co = campts[0] 
            for i in range(1,len(campts)):
                bm.verts.new(campts[i])
            bmesh.update_edit_mesh(ob.data)
            bpy.ops.object.mode_set(mode='OBJECT')  # toggle to edit mode
            bviz = bviz+1 # update curve counter


