import bpy


# what sort of lighting do we want to use?  Don't necessarily have to use this
def __init__(self, lighting_type = 'SUN', lighting_motion=None,
             xpos=-3.0, ypos=0.0, zpos=0.0, name = None):
    if lighting_type is None or lighting_type is 'SUN':
        if name is None:
            name = 'Sun'
        self.name = name
        # add in the sun
        bpy.ops.object.lamp_add(type=lighting_type)
        lamp = bpy.data.objects[self.name]
        lamp.location.x = xpos
        lamp.location.y = ypos
        lamp.location.z = zpos
        radius_lamp = sqrt(xpos**2 + ypos**2 + zpos**2)
        lamp_motion = lighting_motion # for lamp tracking... check on implementation JPN 20150124
    if lighting_type == 'EMISSION': # or do emission lighting
        # turn up emissivity of all objects to look nice
        bpy.data.worlds['World'].light_settings.indirect_factor=20. 
        # have to use approximate, not ray tracing for emitting objects ...
        #   ... for now... 
        bpy.data.worlds['World'].light_settings.gather_method = 'APPROXIMATE' 
        bpy.data.worlds['World'].horizon_color = [0.0, 0.0, 0.0] # horizon = black
        bpy.data.worlds['World'].light_settings.use_indirect_light = True  # emitting things
        lamp_motion = None # no tracking of lamp
    self.lighting_type = lighting_type
    self.location = (xpos,ypos,zpos)

@property
def name(self):
    self.__name = bpy.data.objects[self.__name].name
    return self.__name

@name.setter
def name(self,name):
    deselect_all()
    bpy.context.scene.objects.active = bpy.data.objects[self.__name]
    bpy.data.objects[self.__name].name = name # object name
    self.__name = name

@property
def location(self):
    self.__location = bpy.data.objects[self.name].location
    return self.__location

@location.setter
def location(self,location):
    bpy.context.scene.objects.active = bpy.data.objects[self.name]
    bpy.data.objects[self.name].location = location
    self.__location = location

